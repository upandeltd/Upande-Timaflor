[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-04-11 10:37:24.274230",
  "module": "Upande Timaflor",
  "name": "Update the RFQ from child table to SQ",
  "script": "// Update the RFQ from child table to SQ\nfrappe.ui.form.on('Supplier Quotation', {\n    refresh: function(frm) {\n       \n        if (frm.doc.items && frm.doc.items.length > 0) {\n            let request_for_quotation = frm.doc.items[0].request_for_quotation; \n            frm.set_value('custom_request_for_quotation', request_for_quotation); \n        }\n    },\n\n    validate: function(frm) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            let request_for_quotation = frm.doc.items[0].request_for_quotation; \n            frm.set_value('custom_request_for_quotation', request_for_quotation); \n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-26 03:54:33.025099",
  "module": null,
  "name": "Vehicle/Machinery",
  "script": "frappe.ui.form.on('Stock Entry', {\n    custom_issue_to_type(frm) { \n        // Hide both fields by default\n        frm.toggle_display('custom_type_of_vehicle', false);\n        frm.toggle_display('custom_type_of_machinery', false);\n\n        // Show fields based on selection\n        if (frm.doc.custom_issue_to_type === 'Vehicle') {\n            frm.toggle_display('custom_type_of_vehicle', true);\n        } \n        else if (frm.doc.custom_issue_to_type === 'Machinery') {\n            frm.toggle_display('custom_type_of_machinery', true);\n        }\n\n        // Refresh fields\n        frm.refresh_field('custom_type_of_vehicle');\n        frm.refresh_field('custom_type_of_machinery');\n    },\n    refresh(frm) {\n        // Hide fields on form load\n        frm.toggle_display(['custom_type_of_vehicle', 'custom_type_of_machinery'], false);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Farm Item Analysis",
  "enabled": 1,
  "modified": "2025-03-26 06:33:39.512726",
  "module": null,
  "name": "Farm Items",
  "script": "frappe.ui.form.on('Farm Item Analysis', {\n    item: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.item) {\n            frappe.call({\n                method: 'farm_item_analysis.get_item_details',\n                args: {\n                    'item': row.item\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, 'total_quantity', r.message.total_quantity);\n                        frappe.model.set_value(cdt, cdn, 'average_per_farm', r.message.average_per_farm);\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Reconciliation",
  "enabled": 1,
  "modified": "2025-04-03 10:42:17.659211",
  "module": null,
  "name": "Stock Reconcilliation",
  "script": "// Custom script for Stock Reconciliation form in Frappe/ERPNext\n// Save this as a Client Script for the \"Stock Reconciliation\" DocType\n\nfrappe.ui.form.on('Stock Reconciliation', {\n    refresh: function(frm) {\n        // Apply color coding to quantity difference column\n        applyColorCoding(frm);\n        \n        // Set up the calculation for differences\n        setupDifferenceCalculation(frm);\n    },\n    \n    after_save: function(frm) {\n        // Reapply color coding after save\n        applyColorCoding(frm);\n    }\n});\n\nfunction setupDifferenceCalculation(frm) {\n    // Set up event handlers for physical_stock_count field\n    frappe.ui.form.on('Stock Reconciliation Item', 'custom_physical_stock_count', function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.custom_physical_stock_count !== undefined) {\n            // Calculate difference: physical count - system quantity\n            row.qty_difference = row.custom_physical_stock_count - row.qty;\n            refresh_field('items');\n            applyColorCoding(frm);\n        }\n    });\n    \n    // Initialize physical_stock_count based on qty and existing difference if available\n    frm.doc.items.forEach(function(item) {\n        if (item.qty !== undefined) {\n            // If qty_difference exists, use it to calculate physical_stock_count\n            if (item.qty_difference !== undefined && item.custom_physical_stock_count === undefined) {\n                item.custom_physical_stock_count = item.qty + item.qty_difference;\n            } \n            // If physical_stock_count exists but qty_difference doesn't, calculate difference\n            else if (item.custom_physical_stock_count !== undefined && item.qty_difference === undefined) {\n                item.qty_difference = item.custom_physical_stock_count - item.qty;\n            }\n            // If neither exists, initialize physical_stock_count with qty\n            else if (item.custom_physical_stock_count === undefined) {\n                item.custom_physical_stock_count = item.qty;\n                item.qty_difference = 0;\n            }\n        }\n    });\n    refresh_field('items');\n}\n\nfunction applyColorCoding(frm) {\n    // Apply color coding to quantity difference cells\n    setTimeout(function() {\n        frm.fields_dict.items.grid.grid_rows.forEach(function(row) {\n            const difference = row.doc.qty_difference;\n            \n            if (difference !== undefined && difference !== null) {\n                // Select the cell with qty_difference\n                const $cell = row.columns.qty_difference.$wrapper;\n                \n                // Remove existing color classes\n                $cell.removeClass('text-success text-danger');\n                \n                // Add appropriate color class\n                if (difference > 0) {\n                    $cell.addClass('text-success');\n                } else if (difference < 0) {\n                    $cell.addClass('text-danger');\n                }\n            }\n        });\n    }, 100);\n}\n\n// Add custom CSS for coloring\nfrappe.dom.set_style(`\n    .text-success { color: #28a745 !important; font-weight: bold; }\n    .text-danger { color: #dc3545 !important; font-weight: bold; }\n`);",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-03-21 06:50:53.975796",
  "module": null,
  "name": "Chemical",
  "script": "frappe.ui.form.on('Item', {\n  item_group: function(frm) {\n    if (frm.doc.item_group === 'Chemical') {\n      // Show the Application Rate Type dropdown and parent section\n      frm.set_df_property('custom_application_rate_type', 'hidden', 0);\n      frm.set_df_property('custom_application_rate_type', 'reqd', 1);\n\n     \n\n      // Initialize child fields as hidden\n      frm.set_df_property('custom_application_rate_per_ha', 'hidden', 1);\n      frm.set_df_property('custom_application_volume_per_10002000l', 'hidden', 1);\n\n    } else {\n      // Hide all fields for non-Chemical items\n      ['custom_application_rate_type', 'custom_application_rate_per_ha', \n       'custom_application_volume_per_10002000l'].forEach(field => {\n        frm.set_df_property(field, 'hidden', 1);\n        frm.set_df_property(field, 'reqd', 0);\n      });\n    }\n    frm.refresh_fields();\n  },\n\n  // Handle visibility of rate/volume fields\n  custom_application_rate_type: function(frm) {\n    if (frm.doc.custom_application_rate_type === 'Per Hectare') {\n      frm.set_df_property('custom_application_rate_per_ha', 'hidden', 0);\n      frm.set_df_property('custom_application_volume_per_10002000l', 'hidden', 1);\n      frm.set_df_property('custom_application_rate_per_ha', 'reqd', 1);\n    } else if (frm.doc.custom_application_rate_type === 'Per Volume') {\n      frm.set_df_property('custom_application_volume_per_10002000l', 'hidden', 0);\n      frm.set_df_property('custom_application_rate_per_ha', 'hidden', 1);\n      frm.set_df_property('custom_application_volume_per_10002000l', 'reqd', 1);\n    }\n    frm.refresh_fields();\n  },\n\n  refresh: function(frm) {\n    frm.trigger('item_group');\n    frm.trigger('custom_application_rate_type'); // Update fields on form load\n  }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-03-21 06:55:24.473674",
  "module": null,
  "name": "Fertilizer",
  "script": "frappe.ui.form.on('Item', {\n    item_group: function(frm) {\n        if (frm.doc.item_group === 'Fertilizer') {\n            // Hide or grey out Active Ingredients for Fertilizer\n            frm.set_df_property('custom_active_ingredients', 'hidden', 0); // Hide\n            // OR for read-only (greyed out):\n            frm.set_df_property('custom_active_ingredients', 'read_only', 1);\n\n            // Other Fertilizer-specific settings\n            frm.set_df_property('custom_application_rate', 'hidden', 0);\n            frm.set_df_property('custom_application_rate', 'reqd', 0);\n        } else {\n            // Show Active Ingredients for non-Fertilizer groups\n            frm.set_df_property('custom_active_ingredients', 'hidden', 0);\n            // Hide Fertilizer-specific fields\n            frm.set_df_property('custom_application_rate', 'hidden', 1);\n        }\n    },\n    refresh: function(frm) {\n        frm.trigger('item_group');\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-03-21 09:50:14.658352",
  "module": null,
  "name": "BOM",
  "script": "frappe.ui.form.on('BOM', {\n    refresh: function(frm) {\n        frm.fields_dict.items.grid.grid_rows.forEach(row => {\n            setup_item_code_event(row);\n        });\n    }\n});\n\n// item_code handler\nfrappe.ui.form.on('BOM Item', {\n    item_code: function(frm, cdt, cdn) {\n        const row = frappe.get_doc(cdt, cdn);\n        if (!row.item_code) return;\n\n        frappe.db.get_value('Item', row.item_code, [\n            'item_group',\n            'custom_application_rate_type',\n            'custom_application_rate_per_ha',\n            'custom_application_volume_per_10002000l'\n        ], (r) => {\n            if (!r) return;\n\n            //  Quantity logic\n            if (r.item_group === 'Chemical') {\n                let rate = 0;\n                if (r.custom_application_rate_type === 'Per Hectare') {\n                    rate = r.custom_application_rate_per_ha || 0;\n                } else if (r.custom_application_rate_type === 'Per Volume') {\n                    rate = r.custom_application_volume_per_10002000l || 0;\n                }\n                frappe.model.set_value(cdt, cdn, 'qty', rate);\n            }\n\n            //Field editability logic\n            const isChemical = r.item_group === 'Chemical';\n            const isFertilizer = r.item_group === 'Fertilizer';\n            \n            const grid_row = frm.fields_dict.items.grid.grid_rows_by_docname[cdn];\n            if (grid_row) {\n                grid_row.set_df_property('nozzle', 'read_only', !isChemical);\n                grid_row.set_df_property('variety', 'read_only', !isChemical);\n                grid_row.set_df_property('tank', 'read_only', !isFertilizer);\n            }\n        });\n    }\n});\n\nfunction setup_item_code_event(row) {\n    row.$wrapper.find('[data-fieldname=\"item_code\"]').on('change', () => {\n        row.doc.item_code && row.doc.item_code();\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fertilizer Ordering Sheet",
  "enabled": 1,
  "modified": "2025-03-21 07:37:47.528740",
  "module": null,
  "name": "Fertilizer Order Sheet",
  "script": "frappe.ui.form.on('Fertilizer Ordering Sheet', {\n  days_averaged: function(frm) {\n    // Fetch historical consumption data and calculate averages\n    if (frm.doc.days_averaged && frm.doc.order_items) {\n      frm.doc.order_items.forEach(row => {\n        frappe.call({\n          method: 'your_app.your_custom_method.get_average_consumption',\n          args: {\n            item: row.fertilizer,\n            days: frm.doc.days_averaged\n          },\n          callback: (r) => {\n            frappe.model.set_value(row.doctype, row.name, 't1_avg', r.message);\n          }\n        });\n      });\n    }\n  },\n  order_days: function(frm) {\n    // Auto-calculate order quantity (avg * order_days)\n    if (frm.doc.order_days && frm.doc.order_items) {\n      frm.doc.order_items.forEach(row => {\n        const order_qty = row.t1_avg * frm.doc.order_days;\n        frappe.model.set_value(row.doctype, row.name, 't1_order', order_qty);\n      });\n    }\n  }\n});\n\n// Make \"Days Averaged\" read-only after submit\nfrappe.ui.form.on('Order Sheet', {\n  refresh: function(frm) {\n    if (frm.doc.docstatus === 1) {\n      frm.set_df_property('days_averaged', 'read_only', 1);\n    }\n  }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-21 14:05:26.289651",
  "module": null,
  "name": "Fuel Issuing",
  "script": "frappe.ui.form.on('Stock Entry', {\n    issue_to_type: function(frm) {\n        const is_material_issue = frm.doc.stock_entry_type === \"Material Issue\";\n        // Hide all fields initially\n        frm.toggle_display(['custom_vehicle_registration_number', 'custom_machinery', 'resident'], false);\n        \n        // Show fields based on selected type\n        if (type === 'Vehicle') {\n            frm.toggle_display('custom_vehicle_registration_number', true);\n            frm.set_df_property('custom_vehicle_registration_number', 'reqd', 1);\n        } \n        else if (type === 'Machinery') {\n            frm.toggle_display('custom_machinery', true);\n            frm.set_df_property('custom_machinery', 'reqd', 1);\n        } \n        else if (type === 'Resident') {\n            frm.toggle_display('resident', true);\n            frm.set_df_property('resident', 'reqd', 1);\n        }\n\n        // Force refresh the form layout\n        frm.refresh_fields();\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordering Sheet",
  "enabled": 0,
  "modified": "2025-04-13 10:14:05.698073",
  "module": "Upande Timaflor",
  "name": "Ordering Sheet",
  "script": "//Ordering sheet \nfrappe.ui.form.on('Ordering Sheet', {\n    refresh: function(frm) {\n        // PO Creation Button \n        frm.add_custom_button(__('Create Purchase Order'), function() {\n            // Check document status first\n            if (frm.doc.docstatus === 0) {\n                frappe.confirm(__('Document needs to be submitted before creating Purchase Order. Submit now?'), () => {\n                    frm.savesubmit()\n                        .then(() => {\n                            if(!frm.doc.supplier) {\n                                show_supplier_dialog(frm);\n                            } else {\n                                create_po(frm);\n                            }\n                        })\n                        .catch((err) => {\n                            frappe.msgprint(__(\"Error submitting document: \" + (err.message || err)));\n                        });\n                });\n            } else if (frm.doc.docstatus === 1) {\n                // Document is already submitted\n                if(!frm.doc.supplier) {\n                    show_supplier_dialog(frm);\n                } else {\n                    create_po(frm);\n                }\n            } else {\n                frappe.msgprint(__(\"Cannot create Purchase Order from a cancelled document\"));\n            }\n        }, __('Create'));\n\n        // Calculate Order Quantities Button\n        frm.add_custom_button(__('Calculate Order Quantities'), function() {\n            calculate_order_quantities(frm);\n        });\n\n        // Create RFQ Button\n        frm.add_custom_button(__('Create RFQ'), function() {\n            create_rfq(frm);\n        }, __('Create'));\n    },\n\n    before_save: function(frm) {\n        console.log(\"Trigger: before_save\");\n\n        if (frm.doc.daily_average_consumptiondays > 999) {\n            frappe.msgprint(__(\"Daily Average Consumption Days must be less than 1000\"));\n            frappe.validated = false;\n            return;\n        }\n\n        let item_codes = frm.doc.table_bvnr?.map(row => row.item) || [];\n        \n        if (item_codes.length > 0) {\n            fetch_consumption_data(frm, item_codes).then(() => {\n                frm.refresh_field(\"table_bvnr\");\n                frm.refresh_field(\"daily_minimum_consumption\");\n                frm.refresh_field(\"daily_maximum_consumption\");\n            }).catch(err => {\n                console.error(\"Error fetching consumption data:\", err);\n                frappe.msgprint(__(\"Error fetching consumption data. Please check console for details.\"));\n            });\n        }\n    }\n});\n\nfunction fetch_consumption_data(frm, item_codes) {\n    if (!item_codes || item_codes.length === 0) {\n        console.log(\"No item codes to process\");\n        return Promise.resolve();\n    }\n\n    console.log(\"Fetching consumption data for items:\", item_codes);\n\n    const from_date = frappe.datetime.add_days(frappe.datetime.nowdate(), -frm.doc.daily_average_consumptiondays);\n    const to_date = frappe.datetime.nowdate();\n\n    console.log(\"Date range:\", from_date, \"to\", to_date);\n\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'upande_timaflor.upande_timaflor.doctype.ordering_sheet.ordering_sheet.get_all_consumption_data',\n            args: {\n                item_codes: item_codes,\n                from_date: from_date,\n                to_date: to_date\n            },\n            callback: function(r) {\n                if (r.exc) {\n                    console.error(\"Error in frappe.call:\", r.exc);\n                    reject(r.exc);\n                    return;\n                }\n\n                if (r.message) {\n                    console.log(\"Consumption data received:\", r.message);\n\n                    process_consumption_data(frm, r.message.average, \"table_bvnr\", \"avg\");\n                    process_consumption_data(frm, r.message.minimum, \"daily_minimum_consumption\", \"minimum\");\n                    process_consumption_data(frm, r.message.maximum, \"daily_maximum_consumption\", \"maximum\");\n\n                    resolve();\n                } else {\n                    console.log(\"No data returned\");\n                    resolve();\n                }\n            }\n        });\n    });\n}\n\nfunction process_consumption_data(frm, data, table_field, data_type) {\n    if (!data) {\n        console.log(`No ${data_type} data provided`);\n        return;\n    }\n\n    if (!frm.doc[table_field]) {\n        console.log(`Initializing ${table_field} table`);\n        frm.doc[table_field] = [];\n    }\n\n    console.log(`Processing ${data_type} data for ${table_field}`, data);\n\n    const fieldMap = {\n        \"avg\": {\n            \"Tima1\": \"t1_avg\",\n            \"Tima2\": \"t2_avg\",\n            \"Tima3\": \"t3_avg\",\n            \"Tima4\": \"t4_avg\",\n            \"Tima5\": \"t5_avg\",\n            \"Tima6\": \"t6_avg\",\n            \"Tima7\": \"t7_avg\",\n            \"Jangwani\": \"jangwani_avg\"\n        },\n        \"minimum\": {\n            \"Tima1\": \"tima_1_minimum\",\n            \"Tima2\": \"tima_2_minimum\",\n            \"Tima3\": \"tima_3_minimum\",\n            \"Tima4\": \"tima_4_minimum\",\n            \"Tima5\": \"tima_5_minimum\",\n            \"Tima6\": \"tima_6_minimum\",\n            \"Tima7\": \"tima_7_minimum\",\n            \"Jangwani\": \"jangwani_minimum\"\n        },\n        \"maximum\": {\n            \"Tima1\": \"tima_1_daily_avg\",\n            \"Tima2\": \"tima_2_daily_avg\",\n            \"Tima3\": \"tima_3_daily_avg\",\n            \"Tima4\": \"tima_4_daily_avg\",\n            \"Tima5\": \"tima_5_daily_avg\",\n            \"Tima6\": \"tima_6_daily_avg\",\n            \"Tima7\": \"tima_7_daily_avg\",\n            \"Jangwani\": \"jangwani_daily_avg\"\n        }\n    };\n\n    frm.doc[table_field] = [];\n\n    Object.entries(data).forEach(([item_code, farm_data]) => {\n        console.log(`Adding ${item_code} to ${table_field}`);\n        const row = frappe.model.add_child(frm.doc, table_field.charAt(0).toUpperCase() + table_field.slice(1), table_field);\n        row.item = item_code;\n\n        Object.values(fieldMap[data_type]).forEach(field => {\n            row[field] = 0;\n        });\n\n        Object.entries(farm_data).forEach(([farm, value]) => {\n            const field = fieldMap[data_type][farm];\n            if (field) {\n                const safeValue = parseFloat(value) || 0;\n                row[field] = isNaN(safeValue) || !isFinite(safeValue) ? 0 : safeValue;\n            }\n        });\n    });\n\n    frm.refresh_field(table_field);\n}\n\nfunction show_supplier_dialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Select Supplier'),\n        fields: [{\n            label: __('Supplier'),\n            fieldname: 'supplier',\n            fieldtype: 'Link',\n            options: 'Supplier',\n            reqd: 1\n        }],\n        primary_action: function(values) {\n            dialog.hide();\n            create_po(frm, values.supplier);\n        }\n    });\n    dialog.show();\n}\n\nfunction create_po(frm, supplier) {\n    frappe.confirm(__('Create Purchase Order from this sheet?'), () => {\n        frm.call('create_purchase_order', {\n            supplier: supplier || frm.doc.supplier\n        }).then((r) => {\n            if(r.message) {\n                frappe.show_alert({\n                    message: __('PO {0} created', [r.message]),\n                    indicator: 'green'\n                });\n                frappe.set_route('Form', 'Purchase Order', r.message);\n            }\n        }).catch(err => {\n            frappe.msgprint(`Error creating Purchase Order: ${err.message || err}`);\n        });\n    });\n}\n\nfunction create_rfq(frm) {\n    if (frm.is_dirty()) {\n        // Save the document first if there are unsaved changes\n        frm.save().then(() => {\n            proceedWithRFQCreation(frm);\n        }).catch((err) => {\n            frappe.msgprint(__(\"Error saving document. Please try again.\"));\n        });\n    } else {\n        proceedWithRFQCreation(frm);\n    }\n}\n\nfunction proceedWithRFQCreation(frm) {\n    if (!frm.doc.order_quantity || frm.doc.order_quantity.length === 0) {\n        frappe.msgprint(__('No order quantities available - please calculate order quantities first'));\n        return;\n    }\n\n    // First check if document is in draft state\n    if (frm.doc.docstatus === 0) {\n        // Save and submit document first\n        frappe.confirm(__('Document needs to be submitted before creating RFQ. Submit now?'), () => {\n            frm.savesubmit()\n                .then(() => {\n                    createRFQFromSubmittedDoc(frm);\n                })\n                .catch((err) => {\n                    frappe.msgprint(__(\"Error submitting document: \" + (err.message || err)));\n                });\n        });\n    } else if (frm.doc.docstatus === 1) {\n        // Document is already submitted, proceed with RFQ creation\n        createRFQFromSubmittedDoc(frm);\n    } else {\n        frappe.msgprint(__(\"Cannot create RFQ from a cancelled document\"));\n    }\n}\n\nfunction createRFQFromSubmittedDoc(frm) {\n    frappe.call({\n        method: 'upande_timaflor.upande_timaflor.doctype.ordering_sheet.ordering_sheet.create_rfq',\n        args: {\n            ordering_sheet: frm.doc.name\n        },\n        callback: function(r) {\n            if (r.exc) {\n                frappe.msgprint(`Error creating RFQ: ${r.exc}`);\n                return;\n            }\n            if (r.message) {\n                frappe.show_alert({\n                    message: __('RFQ created: ' + r.message),\n                    indicator: 'green'\n                });\n                frappe.set_route('Form', 'Request for Quotation', r.message);\n            }\n        }\n    });\n}\n\nfunction calculate_order_quantities(frm) {\n    if (!frm.doc.ordering_quantity) {\n        frappe.throw(__('Please set an Ordering Quantity first'));\n        return;\n    }\n\n    const dialog = new frappe.ui.Dialog({\n        title: __('Calculate Order Quantities'),\n        fields: [{\n            label: __('Base Calculation On'),\n            fieldname: 'calculation_base',\n            fieldtype: 'Select',\n            options: 'Average Consumption\\nMinimum Consumption\\nMaximum Consumption\\nCustom Values',\n            default: 'Average Consumption',\n            reqd: 1\n        }],\n        primary_action: function(values) {\n            dialog.hide();\n            \n            // Check if the document is in submitted state\n            const wasSubmitted = frm.doc.docstatus === 1;\n            \n            // If document is already submitted, we'll update via server method\n            if (wasSubmitted) {\n                update_order_quantities_server(frm, values.calculation_base);\n                return;\n            }\n            \n            // For draft documents, continue with client-side update\n            frm.doc.order_quantity = [];\n\n            let source_table, field_map;\n\n            switch(values.calculation_base) {\n                case 'Average Consumption':\n                    source_table = frm.doc.table_bvnr;\n                    field_map = {\n                        't1_avg': 'tima_1',\n                        't2_avg': 'tima_2',\n                        't3_avg': 'tima_3',\n                        't4_avg': 'tima_4',\n                        't5_avg': 'tima_5',\n                        't6_avg': 'tima_6',\n                        't7_avg': 'tima_7',\n                        'jangwani_avg': 'jangwani'\n                    };\n                    break;\n                case 'Minimum Consumption':\n                    source_table = frm.doc.daily_minimum_consumption;\n                    field_map = {\n                        'tima_1_minimum': 'tima_1',\n                        'tima_2_minimum': 'tima_2',\n                        'tima_3_minimum': 'tima_3',\n                        'tima_4_minimum': 'tima_4',\n                        'tima_5_minimum': 'tima_5',\n                        'tima_6_minimum': 'tima_6',\n                        'tima_7_minimum': 'tima_7',\n                        'jangwani_minimum': 'jangwani'\n                    };\n                    break;\n                case 'Maximum Consumption':\n                    source_table = frm.doc.daily_maximum_consumption;\n                    field_map = {\n                        'tima_1_daily_avg': 'tima_1',\n                        'tima_2_daily_avg': 'tima_2',\n                        'tima_3_daily_avg': 'tima_3',\n                        'tima_4_daily_avg': 'tima_4',\n                        'tima_5_daily_avg': 'tima_5',\n                        'tima_6_daily_avg': 'tima_6',\n                        'tima_7_daily_avg': 'tima_7',\n                        'jangwani_daily_avg': 'jangwani'\n                    };\n                    break;\n                case 'Custom Values':\n                    show_custom_values_dialog(frm);\n                    return;\n            }\n\n            if (source_table && source_table.length > 0) {\n                source_table.forEach(source_row => {\n                    let order_row = frappe.model.add_child(frm.doc, \"Order Quantity\", \"order_quantity\");\n                    order_row.item = source_row.item;\n\n                    Object.entries(field_map).forEach(([source_field, target_field]) => {\n                        const baseValue = source_row[source_field] || 0;\n                        const calculatedValue = baseValue * frm.doc.ordering_quantity;\n                        order_row[target_field] = isNaN(calculatedValue) || !isFinite(calculatedValue) ? 0 : calculatedValue;\n                    });\n                });\n\n                frm.refresh_field(\"order_quantity\");\n                \n                // Save without submit\n                frm.save().then(() => {\n                    frappe.show_alert({\n                        message: __('Order quantities calculated and saved based on ' + values.calculation_base),\n                        indicator: 'green'\n                    });\n                }).catch(err => {\n                    frappe.msgprint(__(\"Error saving calculated quantities: \" + (err.message || err)));\n                });\n            } else {\n                frappe.msgprint(__('No source data found for ' + values.calculation_base));\n            }\n        }\n    });\n    dialog.show();\n}\n\n// New function to update order quantities via server method for submitted documents\nfunction update_order_quantities_server(frm, calculation_base) {\n    frappe.call({\n        method: 'upande_timaflor.upande_timaflor.doctype.ordering_sheet.ordering_sheet.update_order_quantities',\n        args: {\n            doc_name: frm.doc.name,\n            calculation_base: calculation_base,\n            ordering_quantity: frm.doc.ordering_quantity\n        },\n        freeze: true,\n        freeze_message: __('Calculating Order Quantities...'),\n        callback: function(r) {\n            if (r.exc) {\n                frappe.msgprint(__(\"Error calculating order quantities: \" + r.exc));\n                return;\n            }\n            \n            if (r.message) {\n                // Reload the form to get the updated data\n                frm.reload_doc();\n                \n                frappe.show_alert({\n                    message: __('Order quantities calculated based on ' + calculation_base),\n                    indicator: 'green'\n                });\n            }\n        }\n    });\n}\n\nfunction show_custom_values_dialog(frm) {\n    let items = [];\n\n    if (frm.doc.table_bvnr && frm.doc.table_bvnr.length > 0) {\n        items = frm.doc.table_bvnr.map(row => ({ label: row.item, value: row.item }));\n    } else if (frm.doc.daily_minimum_consumption && frm.doc.daily_minimum_consumption.length > 0) {\n        items = frm.doc.daily_minimum_consumption.map(row => ({ label: row.item, value: row.item }));\n    } else if (frm.doc.daily_maximum_consumption && frm.doc.daily_maximum_consumption.length > 0) {\n        items = frm.doc.daily_maximum_consumption.map(row => ({ label: row.item, value: row.item }));\n    }\n\n    if (items.length === 0) {\n        frappe.msgprint(__('No items found for custom order calculation'));\n        return;\n    }\n\n    const dialog = new frappe.ui.Dialog({\n        title: __('Enter Custom Order Values'),\n        fields: [\n            { label: __('Item'), fieldname: 'item', fieldtype: 'Select', options: items, reqd: 1 },\n            { label: __('TIMA 1'), fieldname: 'tima_1', fieldtype: 'Float', default: 0 },\n            { label: __('TIMA 2'), fieldname: 'tima_2', fieldtype: 'Float', default: 0 },\n            { label: __('TIMA 3'), fieldname: 'tima_3', fieldtype: 'Float', default: 0 },\n            { label: __('TIMA 4'), fieldname: 'tima_4', fieldtype: 'Float', default: 0 },\n            { label: __('TIMA 5'), fieldname: 'tima_5', fieldtype: 'Float', default: 0 },\n            { label: __('TIMA 6'), fieldname: 'tima_6', fieldtype: 'Float', default: 0 },\n            { label: __('TIMA 7'), fieldname: 'tima_7', fieldtype: 'Float', default: 0 },\n            { label: __('Jangwani'), fieldname: 'jangwani', fieldtype: 'Float', default: 0 }\n        ],\n        primary_action: function(values) {\n            const wasSubmitted = frm.doc.docstatus === 1;\n            \n            if (wasSubmitted) {\n                // For submitted documents, use server method\n                frappe.call({\n                    method: 'upande_timaflor.upande_timaflor.doctype.ordering_sheet.ordering_sheet.add_custom_order_quantity',\n                    args: {\n                        doc_name: frm.doc.name,\n                        item_values: values\n                    },\n                    callback: function(r) {\n                        if (r.exc) {\n                            frappe.msgprint(__(\"Error adding custom order: \" + r.exc));\n                            return;\n                        }\n                        \n                        dialog.hide();\n                        frm.reload_doc();\n                        \n                        frappe.show_alert({\n                            message: __('Custom order added successfully'),\n                            indicator: 'green'\n                        });\n                    }\n                });\n            } else {\n                // For draft documents\n                let order_row = frappe.model.add_child(frm.doc, \"Order Quantity\", \"order_quantity\");\n                order_row.item = values.item;\n                order_row.tima_1 = values.tima_1;\n                order_row.tima_2 = values.tima_2;\n                order_row.tima_3 = values.tima_3;\n                order_row.tima_4 = values.tima_4;\n                order_row.tima_5 = values.tima_5;\n                order_row.tima_6 = values.tima_6;\n                order_row.tima_7 = values.tima_7;\n                order_row.jangwani = values.jangwani;\n\n                frm.refresh_field(\"order_quantity\");\n\n                dialog.fields_dict.tima_1.set_value(0);\n                dialog.fields_dict.tima_2.set_value(0);\n                dialog.fields_dict.tima_3.set_value(0);\n                dialog.fields_dict.tima_4.set_value(0);\n                dialog.fields_dict.tima_5.set_value(0);\n                dialog.fields_dict.tima_6.set_value(0);\n                dialog.fields_dict.tima_7.set_value(0);\n                dialog.fields_dict.jangwani.set_value(0);\n\n                frappe.show_alert({\n                    message: __('Item added to Order Quantity'),\n                    indicator: 'green'\n                });\n            }\n        }\n    });\n\n    dialog.show();\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2025-04-24 14:46:33.363410",
  "module": "Upande Timaflor",
  "name": "Biometric Signature",
  "script": "frappe.ui.form.on('Material Request', {\n    refresh(frm) {\n        handle_biometric_logic(frm);\n\n        // Add warning message if biometric signature is missing\n        if (frm.doc.docstatus === 1 && frm.doc.material_request_type === \"Material Issue\") {\n            if (!has_biometric_signature(frm)) {\n                frm.dashboard.add_comment(__('Please add a biometric signature before creating Material Issue.'), 'yellow');\n            }\n        }\n    },\n\n    material_request_type(frm) {\n        handle_biometric_logic(frm);\n    },\n\n    validate(frm) {\n        if (\n            frm.doc.material_request_type === \"Material Issue\" &&\n            frappe.flags.submit &&\n            !has_biometric_signature(frm)\n        ) {\n            frappe.throw(\"Biometric Signature is required before submitting a Material Issue request.\");\n        }\n    },\n\n   // Modified make_stock_entry function to pass employee data\n    make_stock_entry: function(frm) {\n        if (frm.doc.material_request_type === \"Material Issue\" && !has_biometric_signature(frm)) {\n            frappe.msgprint(__(\"Please add a biometric signature before creating Material Issue.\"));\n            return;\n        }\n        \n        // Get the employee from biometric data\n        let employee = null;\n        if (frm.doc.custom_biometric_data && frm.doc.custom_biometric_data.length > 0) {\n            employee = frm.doc.custom_biometric_data[0].employee;\n        }\n        \n        // If validation passes, open the mapped doc and set employee\n        frappe.model.open_mapped_doc({\n            method: \"erpnext.stock.doctype.material_request.material_request.make_stock_entry\",\n            frm: frm,\n            callback: function(r) {\n                if (r.doc && employee) {\n                    frappe.model.set_value(r.doc.doctype, r.doc.name, \"employee\", employee);\n                }\n            }\n        });\n    }\n});\n\nfunction handle_biometric_logic(frm) {\n    frm.set_df_property(\"custom_biometric_data\", \"hidden\", 1);\n    frm.set_df_property(\"custom_biometric_data\", \"reqd\", 0);\n    frm.remove_custom_button('Add Biometric Signature');\n\n    if (frm.doc.docstatus === 1 && frm.doc.material_request_type === \"Material Issue\") {\n        frm.set_df_property(\"custom_biometric_data\", \"hidden\", 0);\n        frm.set_df_property(\"custom_biometric_data\", \"reqd\", 1);\n        if (!has_biometric_signature(frm)) {\n            add_biometric_button(frm);\n        }\n    }\n}\n\nfunction has_biometric_signature(frm) {\n    return (frm.doc.custom_biometric_data || []).length > 0;\n}\n\nfunction add_biometric_button(frm) {\n    frm.add_custom_button('Add Biometric Signature', async () => {\n        if (has_biometric_signature(frm)) {\n            frappe.msgprint('Biometric data already added.');\n            frm.remove_custom_button('Add Biometric Signature');\n            return;\n        }\n\n        try {\n            const result = await frappe.call({\n                method: 'get_latest_biometric_log'\n            });\n\n            if (result && result.message) {\n                const log = result.message;\n                const row = frappe.model.add_child(frm.doc, 'Biometric Signature', 'custom_biometric_data');\n                row.employee = log.employee;\n                row.employee_name = log.employee_name;\n                row.biometric_id = log.biometric_id;\n                row.timestamp = log.timestamp;\n\n                frm.refresh_field('custom_biometric_data');\n                frappe.msgprint('Biometric data added.');\n                frm.remove_custom_button('Add Biometric Signature');\n            } else {\n                frappe.msgprint('No biometric log found in the last 30 seconds.');\n            }\n        } catch (e) {\n            frappe.msgprint(__('Error fetching biometric log: ') + e.message);\n        }\n    });\n}\n",
  "view": "Form"
 }
]